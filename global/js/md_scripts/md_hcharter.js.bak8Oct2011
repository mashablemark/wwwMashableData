//mashableData theme
var MashableData = { version: "0.1"}  //start of namespace.  Ultimately, make as mush of this configurable as possible

$(document).ready(function(){
	var btnHeight = 20;
	var btnsWidth = 24;
	var btnsX = 10;
	var btnsY = 10;

	Highcharts.theme = {
		plotOptions :{   //strictly speaking, the hover state is not part of the MD theme
			series: { 
				marker: {
					enabled: false, 
					states: {
							hover: {enabled: true} 
					}
				} 
			} 
		},
		exporting: {
			buttons:{
				printButton: {
					enabled: false
				},
				exportButton:{
					x : -10,
					y : btnsY,
					height : btnHeight,
					width : btnsWidth,
					menuItems: null,
					onclick: function(){mashableDataMain(this)}
				}
			}
		}
	}
	
  var highchartsOptions = Highcharts.setOptions(Highcharts.theme);
	
	$.extend(Highcharts.Renderer.prototype.symbols, {
    gear: function() {
			var innerR =5;
			var outterR=7;
			var offset=11;
			var teeth=10,
			gearCommands = ['M',10,0];
			for(i=0;i<teeth;i++){
				var angle = (2*Math.PI / teeth * i) + (2*Math.PI / (teeth*4));
			  gearCommands.push('L');
			  gearCommands.push(Math.sin(angle)*outterR + offset);
			  gearCommands.push(offset-Math.cos(angle)*outterR);
			  gearCommands.push('L');
			  gearCommands.push(Math.sin(angle)*innerR + offset);
			  gearCommands.push(offset-Math.cos(angle)*innerR);
				var angle = (2*Math.PI / teeth * i) + 3* (2*Math.PI / (teeth*4));
			  gearCommands.push('L');
			  gearCommands.push(Math.sin(angle)*innerR + offset);
			  gearCommands.push(offset-Math.cos(angle)*innerR);
			  gearCommands.push('L');
			  gearCommands.push(Math.sin(angle)*outterR + offset);
			  gearCommands.push(offset-Math.cos(angle)*outterR);
			}
			gearCommands.push('Z');
			return gearCommands;
    }
	});
});

function mashableDataMain(thischart){
	currentChart = thischart;  //global scope on purpose
	//console.info(thischart);
	var chartWidth = thischart.chartWidth;
	var chartHeight = thischart.chartHeight;
	var containID = thischart.container.id;
	var fudgeFactor = 10; //dont know why this is needed
	
	var y = Highcharts.theme.exporting.buttons.exportButton.y;// +  Highcharts.theme.exporting.buttons.mashableDataButton.height;
	var right = - Highcharts.theme.exporting.buttons.exportButton.x;
	var mdContents = '<span class="md_h2">Download Center</span>' + 
	  '<div class="md_export" style="float:none;background-color:blue"><div class="md_export md_left" style="float:left;background-color:yellow">' +
		'<span class="md_h3">Image files</span>' + 
	  '<ul><li onclick="currentChart.exportChart();">PNG format</li>' +
		'<li onclick="currentChart.exportChart({type: \'image/jpeg\'});">JPG format<svg width="10" height="10" version="1.1" xmlns="http://www.w3.org/2000/svg"><elipse cx="5" cy="5" rx="5" ry="3" style="fill:rgb(200,100,50);stroke:rgb(0,0,100);stroke-width:2"/></svg></li>' +
		'<li onclick="currentChart.exportChart({type: \'image/svg+xml\'});">SVG format</li>' +
		'<li onclick="currentChart.exportChart({type: \'application/pdf\'});">PDF format</li>' +
		'</ul></div>' +
	  '<div class="md_export md_right" style="float:left;background-color:green"">' +
		'<span class="md_h3">Data files</span>' + 
		'<ul>' +
		'<li onclick="currentChart.exportCSV;">CSV format</li>' +
		'<li onclick="currentChart.exportExcelChart;">Excel format</li>' +
		'</ul></div></div>' +
		'<div id="md_ct" style="clear:both;"><span class="md_h2">Chart Tools</span>' +
		'<ul><li onclick="{plotLinearRegressions(); hideMdPanel();}">Show / Hide linear regressions</li></ul></div>'
/*
mdContents += '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid slice" style="width:100%; height:100%; position:absolute; top:0; left:0; z-index:99;">'
mdContents += '<linearGradient id="gradient">'
mdContents += '<stop class="begin" offset="0%"/>'
mdContents += '<stop class="end" offset="100%"/>'
mdContents += '</linearGradient>'
mdContents += '<rect x="0" y="0" width="100" height="100" style="fill:url(#gradient)" />'
mdContents += '<circle cx="50" cy="50" r="30" style="fill:url(#gradient)" />'
mdContents += '</svg>'
*/
//save options
  var aSavedSeries = []
	if(window.localStorage.getItem("mashableDataIndex") != null){
		var aSavedSeries = window.localStorage.getItem("mashableDataIndex").split("|");	
	}
	mdContents += '<div id="md_sds" style="clear:both;"><span class="md_h2">Save data series to local cache</span><br />'
	for(var i=0;i<chart.series.length;i++){	
	  if(chart.series[i].name.indexOf("Linear regression of")!="0") {
			mdContents += '<input type="checkbox" onclick="mdSaveButtonState()" class="mdSaveChk" value="' + i + '" name="' + chart.series[i].name + '" />' + chart.series[i].name  + '<br />';
		}	
	}
	mdContents += '<button id="mdSaveSeriesBtn" disabled="disabled" onclick="saveDataSeries()">Save to cache</button>'
	
	//load options
	if(window.localStorage.getItem("mashableDataIndex") != null){
		mdContents += '<div id="md_lds" style="clear:both;"><span class="md_h2">Load data series from local cache</span><br />'
		for(var i=0;i<aSavedSeries.length;i++){	
			mdContents += '<input type="checkbox" onclick="mdLoadButtonsState()" class="mdLoadChk" value="' + i + '" name="' + aSavedSeries[i] + '" />' + aSavedSeries[i]  + '<br />';
/* thinking of disabling the checkbox, but this control is used to both graph and delete				
			for(var j=0;j<chart.series.length;j++){	
				if(chart.series[j].name = aSavedSeries[i]){
				  mdContents += '<input type="checkbox" onclick="mdLoadButtonsState()" disabled="disabled" class="mdLoadChk" value="' + i + '" name="' + aSavedSeries[i] + '" />' + aSavedSeries[i]  + '<br />';
			} else {
					mdContents += '<input type="checkbox" onclick="mdLoadButtonsState()" class="mdLoadChk" value="' + i + '" name="' + aSavedSeries[i] + '" />' + aSavedSeries[i]  + '<br />';
				}
			}   */
		}
		mdContents += '<button id="mdGraphSeriesBtn" disabled="disabled" onclick="loadDataSeries()">Graph</button>';
		mdContents += '<button id="mdDeleteSeriesBtn" disabled="disabled" onclick="deleteSeries()">Delete from cache</button>';
		mdContents += '<button id="mdClearCacheBtn" onclick="mdClearCache()">Clear entire cache</button>';
	}



	$('div#' + containID).prepend('<div  id="mashabledata_menu" style="position:absolute;z-index:10;right:' + right + 'px;top:' + y + 
		'px;background-color:#fff; border: 1px solid #aaa;width:400px;padding:5px;display:none;">' + mdContents + '</div>');
	
	document.getElementById('mashabledata_menu').onmouseout= function(event){
			//is bubbled up from a child?
			if (event===undefined) event= window.event;  
			var target= 'target' in event? event.target : event.srcElement;
			if (target!==this) return;
			//is event due to move from parent to child?
			var other= 'relatedTarget' in event? event.relatedTarget : event.toElement;
			while ((other= other.parentNode).nodeType===1)
					if (other===this) return;
			//desired event = truly exiting DIV
			$(this).slideToggle('fast',function(){$(this).remove();});
	};
	
	$('div#mashabledata_menu').slideToggle('fast');
}

function hideMdPanel(){
	$('div#mashabledata_menu').slideToggle('fast',function(){$(this).remove();});
}

function plotLinearRegressions(){
	var hadLinearRegressions = false;
	for(var i=chart.series.length-1;i>=0;i--){
		//wouldn't accept new property: chart.series[i].regression
			//console.info(chart.series[i].dashStyle);
		if(chart.series[i].name.indexOf("Linear regression of") != '-1'){
			//console.info('trying to remove ' + chart.series[i].name);
			chart.series[i].remove(false);
			hadLinearRegressions = true;
		}
	}
	if(!hadLinearRegressions){
		for(var i=chart.series.length-1;i>=0;i--){	
			if(chart.series[i].name.indexOf("Linear regression of") == '-1'){
				var newSeries = addLinearRegression(chart, chart.series[i])
			} 
		}
	}
		chart.redraw()
}

function addLinearRegression(hChart, series){
	var sumX = 0;
	var minX = null;
	var maxX = null;
	var sumY = 0;
	var minY = null;
	var maxY = null;
	var points = 0;
	//console.info(series);
	for(var j=0;j<series.data.length;j++){
		if(series.data[j].x != null && series.data[j].y != null){
			sumX +=  series.data[j].x;
			sumY +=  series.data[j].y;
			if(minX == null){minX=series.data[j].x;}
			if(maxX == null){maxX=series.data[j].x;}
			if(minY == null){minY=series.data[j].y;}
			if(maxY == null){maxY=series.data[j].y;}
			if(minX>series.data[j].x){minX=series.data[j].x;}
			if(maxX<series.data[j].x){maxX=series.data[j].x;}
			if(minY>series.data[j].y){minY=series.data[j].y;}
			if(maxY<series.data[j].y){maxY=series.data[j].y;}
			points++;
		}
	}
	var avgX = sumX / points;
	var avgY = sumY / points;
	//console.info("avg y: " + avgY);
	var num = 0;
	var den = 0;
	for(var j=0;j<series.data.length;j++){
		if(series.data[j].x != null && series.data[j].y != null){
			 num += (series.data[j].x - avgX) * (series.data[j].y - avgY)
			 den += (series.data[j].x - avgX)*(series.data[j].x - avgX);
		}
	}
	var b1 = num / den;  //sum((x_i-x_avg)*(y_i-y_avg)) / sum((x_i-x_avg)^2)
	//console.info(b1 + "=" + num + "/" + den);
	var b0 = avgY - b1 * avgX;
	
	var newSeries = { 
		name:  "Linear regression of " + series.name,
        dashStyle: 'shortdot',
		color: series.color,
		data: [],
		regression: true
	}
	for(var j=0;j<series.data.length;j++){
		if(series.data[j].x != null && series.data[j].y != null){
			newSeries.data.push([series.data[j].x , (b1*series.data[j].x  + b0)]);  //y = b1*x + b0
		}
	}
	//newSeries.data.push([minX, (b1*minX + b0)]);  //y = b1*x + b0
	return(hChart.addSeries(newSeries,false));
	
}
//if more than one series in graph, present popup with series and checkboxes and a save button (and ultimately a save to my.mashabledata.com)


function mdSaveButtonState(){
	if($('input.mdSaveChk:checked').length == 0){
		$('button#mdSaveSeriesBtn').attr("disabled","disabled");
	} else {
		$('button#mdSaveSeriesBtn').removeAttr("disabled","disabled");
	}
}

function mdLoadButtonsState(){
	if($('input.mdLoadChk:checked').length == 0){
		$('button#mdGraphSeriesBtn').attr("disabled","disabled");
		$('button#mdDeleteSeriesBtn').attr("disabled","disabled");
	} else {
		$('button#mdGraphSeriesBtn').removeAttr("disabled","disabled");
		$('button#mdDeleteSeriesBtn').removeAttr("disabled","disabled");
	}
}

function saveDataSeries(){
	if($('input.mdSaveChk:checked').length > 0){
		var mashableDataIndex = window.localStorage.getItem("mashableDataIndex");
		if(mashableDataIndex == null){
			aExistingData = []
		} else {
			var aExistingData = mashableDataIndex.split("|");
		}
		$('input.mdSaveChk:checked').each(function(){
			for(var i=0;i<aExistingData.length;i++){
				if(this.name == aExistingData[i]){
					//replace it by first deleting and then adding
					window.localStorage.removeItem(this.name)
					aExistingData.splice(i,1);
				}
			}
			aExistingData.push(this.name);
			var dataString = "md_format|v0.1";
			dataString += "||url|" + window.location;
/*need to find a way to store these
		if(chart.credits.text!=null){
				if(chart.credits.length>0){
					dataString += "||src|" + chart.creditsn;
				}
			}
*/
			dataString += "||type|datetime";
//			dataString += "||unit_nom|" + chart.xAxis[this.xAxis].title;
			dataString += "||series|" + this.name;
			dataString += "||data|begin";
			for(var i=0;i<chart.series[parseInt(this.value)].data.length;i++){
				xDate = new Date(chart.series[(this.value)].data[i].x);
				//console.info(xDate.getFullYear() + ";" + chart.series[parseInt(this.value)].data[i].y);
				dataString = dataString + ((dataString.length==0)?"":"||") + xDate.getFullYear() + "|" + chart.series[parseInt(this.value)].data[i].y;
			}
			//console.info("dataString: " + dataString);
			window.localStorage.setItem(this.name, dataString);
			//console.info(chart.series[0]);
		});
		window.localStorage.setItem("mashableDataIndex", aExistingData.join("|"));
	}
	hideMdPanel()
}

function loadDataSeries()	{
	$('input.mdLoadChk:checked').each(function(){
		var newSeries = { name:  this.name,
						  data: []}
		rawSeries = window.localStorage.getItem(this.name);
		var dataHeader = "data|begin||";
		var rawDataSeries = rawSeries.substring(rawSeries.indexOf(dataHeader) + dataHeader.length);
		aPoints =	rawDataSeries.split("||");
		for(var i=0; i<aPoints.length;i++){
			var xy = aPoints[i].split("|");
			newSeries.data.push([Date.parse("January 1, " + xy[0]),parseInt(xy[1])]);
		}
		chart.addSeries(newSeries,false); 
	});
	hideMdPanel();
	chart.redraw();
	//console.info(chart);
}

function mdClearCache(){
	//if(confirm("Ok to clear entire Mashable Data cache")==true){
		window.localStorage.clear()	;
		hideMdPanel();
	//}
}


var aCurrentSeries = [];
var aHistorySeries = [];
var aSavedSeries = [];
var aClickFields = [];
var renderInstantaneously = false

//MD functions:

function saveSeries(){
	
}
function loadSeries(){
	
}
function transformSeries(seriesKeyString, transform){
//transform =	regression || 12 month with previous 5 year limits || 5 year seasonal strings ||  rolling average
}
function getSeriesList(type, saved){
// type = 'history' || 'saved' || 'current'
// saved = boolean indicated whether to include series that are already saved.  Applicable to 'current' only.
}
function showSeriesList(aSeriesKeys, targetPanel, type){
// aSeriesKeys = array of | delinted strings of series 'key display fields
// target = pointer to div in which the list will be display
// type = 'history' || 'saved' || 'current'
}
function addSeries(seriesKeys,targetPanel,type){
// seriesKeys = string of | delinted series key display fields
// type = 'history' || 'saved' || 'current'
// target = pointer to div in which the list will be display
// return = seriesID of <tr> holding ID
}
function removeSeries(seriesId,targetPanel){
//remove seeries from visual display and the associated array
//return true if found and remove; else return false
}
function deleteSeries(series){
//remove from any/all panels and from localStorage
}
function seriesClick(tdClicked, action){
//tdClicked is the TD cell clicked
//action = '??'
//graphSeries - may need helper functions
}
function ungraphSeries(seriesKeyString){
	
}
function isSavable(seriesKeyString){  
//how to determine whether an item is savable??
	
}
function isGaphable(seriesKeyString){
	
}
function isTransformable(seriesKeyString){
	
}
function getDataPortion(seriesStorageString){
	
}
function getMetadataPortion(seriesStorageString){
	
}
function getMetadata(rawSeriesString, key){
//rawSeriesString = direct from localStorage value
}
function buildMetadate(rawSeriesString){
//rawSeriesString = direct from localStorage value
	
}
//seriesStorageString format = "name|graphTitle|url|datetimeDownloaded|transform|isGraphed|isGraphable|isTranformable|isSaveable"


/*Decide conventions for the attributes of HTML items in the div:
classes
ids
... and what get stuffed in "name" attribute
*/